    'CR1000 Series Datalogger
'
'date: 04 April 2013
'program author: Sarah Waldo
' This program is designed for the auxiliary CR1000 datalogger to run the solenoid valves, in 
' order to prevent corruption of the LI6262 CO2 signal by electronic noise. This program simply 
' uses "PortSet" to turn the solenoids off and on. The interval can be easily switched if 
' needed, for example to integrate taking measurements off of a chamber. 
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


''''''''''''''' SETTINGS ''''''''''''''''
ConstTable
  Const SCAN_INTV = 1         'scan frequency, seconds
  Const STATS_INTV = 30*60    'time interval of statistics output, seconds
  Const CAL_INTV = 60         'time interval of output to themistor calibration table, seconds
EndConstTable


''''''''''''''' WIRING '''''''''''''''
'trace gas analyzer analog input
Const CH1_IO = 1 'DF
Const CH2_IO = 2 'DF

'closed-path CO2/H2O analyzer
Const CP_CO2_IO = 5 'DF
Const CP_H2O_IO = 6 'DF

'aspirated temperature sensors
Const TMPR_BTM_IO = 14 'SE
Const TMPR_MID_IO = 15 'SE
Const TMPR_TOP_IO = 16 'SE
Const TMPR_VX_IO = Vx3

'level-selection valves
Const VALVE_1_CTRL = 7   'C7
' Valve 1 controls selection of bottom- or top-level sampling lines
'   Normally Open ---------- Bottom level (closest to ground) inlet
'   Normally Closed -------- Top level (farthest from fround) inlet
'   Common ----------------- EITHER (a) to analyzer delivery 
'                                   (b) Valve #2 NO
Const VALVE_2_CTRL = 8   'C8
' Valve 2 controls selection of mid-level sampling line or other valve (top/btm lines)
'   Normally Open ---------- Valve #1 Common 
'   Normally Closed -------- Middle level (between bottom, top) inlet
'   Common ----------------- To analyzer delivery


''''''''''''''' CONSTANTS ''''''''''''''''
Const INTEG = 250

Const TMPR_MULT = 1  'use Celcius for thermistors
Const TMPR_OFF = 0


''''''''''''''' VARIABLES ''''''''''''''''
'public view of valve status
Public valve_state As String * 8
Const TOP = "top"
Const MIDDLE = "middle"
Const BOTTOM = "bottom"
Const Enable = True
Const Disable = False

'measurements from DF1, DF2
Public raw_conc(2)
Alias raw_conc(1) = ch1_value
Alias raw_conc(2) = ch2_value

'level-partitioned readings of DF1, DF2
Public conc(6)
Alias conc(1) = ch1_btm
Alias conc(2) = ch1_mid
Alias conc(3) = ch1_top
Alias conc(4) = ch2_btm
Alias conc(5) = ch2_mid
Alias conc(6) = ch2_top

'measurements from closed-path CO2/H2O analyzer
Public raw_cp_irga(2)
Alias raw_cp_irga(1) = cp_CO2_value
Alias raw_cp_irga(2) = cp_H2O_value

' TODO !!!! Determine a specific set of input units for CO2/H2O

'level-partitioned readings of closed-path CO2/H2O
Public cp_irga(6)
Alias cp_irga(1) = cp_CO2_btm
Alias cp_irga(2) = cp_CO2_mid
Alias cp_irga(3) = cp_CO2_top
Alias cp_irga(4) = cp_H2O_btm
Alias cp_irga(5) = cp_H2O_mid
Alias cp_irga(6) = cp_H2O_top

'measurements from aspirated themistors
Public tmpr(3)
Alias tmpr(1) = tmpr_btm
Alias tmpr(2) = tmpr_mid
Alias tmpr(3) = tmpr_top
Units tmpr = degC

'data logger built-in sensors
Public logger_temp, logger_voltage
Units logger_temp = degC
Units logger_voltage = volts

'for post-statistics manipulation
Public stats_out(10) 'match length of work_stats table
Alias stats_out(1)  = ch1_btm_Avg
Alias stats_out(2)  = ch1_top_Avg
Alias stats_out(3)  = ch2_btm_Avg
Alias stats_out(4)  = ch2_top_Avg
Alias stats_out(5)  = cp_CO2_btm_Avg
Alias stats_out(6)  = cp_CO2_top_Avg
Alias stats_out(7)  = cp_H2O_btm_Avg
Alias stats_out(8)  = cp_H2O_top_Avg
Alias stats_out(9)  = tmpr_btm_Avg
Alias stats_out(10) = tmpr_top_Avg

'gradient & flux calculation variables
Public tmpr_gradient
Units tmpr_gradient = degC/m

Public tmpr_gradient_H
Units tmpr_gradient_H = cm

Public gas_gradient_H
Units gas_gradient_H = cm

' TODO !!!! need sonic integration for online evaluation of eddy diffusivity of
' heat
' 
' specifically, need cov_w_Ts 


'level-selection valve control
Dim num_levels = {2} '2 or 3, determines if mid level is sampled
Dim valve_on(2) As Boolean
Alias valve_on(1) = is_sampling_top 'else bottom
Alias valve_on(2) = is_sampling_mid 'else top or bottom

'control whether/where themistor data is storeds; aligned to boolean as in:
Const Normal = -1 'True
Const Calibrating = 1 'True * -1
Const Standby = 0 'False

''''''''''''''' SETTINGS RETENTION ''''''''''''''
Dim filehandle as Long
Const SETTINGS_FILE = "CPU:grad_settings.dat"
Const NUM_SETTINGS = {22}
Const WRITEFILE = 0
Const READFILE = 1

Const Logarithmic = 0
Const Linear = -1

'necessary to retain whole # equivalent of toggle_time for use in TimeIntoInterval
Dim toggle_intv 'seconds

Dim save_changes As Boolean
Dim settings(NUM_SETTINGS)
Alias settings(1)  = ch1_enabled
Alias settings(2)  = ch1_mult
Alias settings(3)  = ch1_offset
Alias settings(4)  = ch2_enabled
Alias settings(5)  = ch2_mult
Alias settings(6)  = ch2_offset
Alias settings(7)  = cp_co2_enabled
Alias settings(8)  = cp_co2_mult
Alias settings(9)  = cp_co2_offset
Alias settings(10) = cp_h2o_enabled
Alias settings(11) = cp_h2o_mult
Alias settings(12) = cp_h2o_offset
Alias settings(13) = tmpr_enabled
Alias settings(14) = tmpr_state
Alias settings(15) = tmpr_top_btm 'cal. offset
Alias settings(16) = sonic_azimuth
Alias settings(17) = toggle_time
Alias settings(18) = inlet_top_H
Alias settings(19) = inlet_btm_H
Alias settings(20) = tmpr_top_H
Alias settings(21) = tmpr_btm_H
Alias settings(22) = grad_type
Units tmpr_top_btm = degC
Units sonic_azimuth = deg TN
Units toggle_time = min
Units inlet_top_H = cm
Units inlet_btm_H = cm
Units tmpr_top_H = cm
Units tmpr_btm_H = cm

Dim choice(NUM_SETTINGS)
Alias choice(1)  = ch_ch1_enabled
Alias choice(2)  = ch_ch1_mult
Alias choice(3)  = ch_ch1_offset
Alias choice(4)  = ch_ch2_enabled
Alias choice(5)  = ch_ch2_mult
Alias choice(6)  = ch_ch2_offset
Alias choice(7)  = ch_cp_co2_enabled
Alias choice(8)  = ch_cp_co2_mult
Alias choice(9)  = ch_cp_co2_offset
Alias choice(10) = ch_cp_h2o_enabled
Alias choice(11) = ch_cp_h2o_mult
Alias choice(12) = ch_cp_h2o_offset
Alias choice(13) = ch_tmpr_enabled
Alias choice(14) = ch_tmpr_state
Alias choice(15) = ch_tmpr_top_btm
Alias choice(16) = ch_sonic_azimuth
Alias choice(17) = ch_toggle_time
Alias choice(18) = ch_inlet_top_H
Alias choice(19) = ch_inlet_btm_H
Alias choice(20) = ch_tmpr_top_H
Alias choice(21) = ch_tmpr_btm_H
Alias choice(22) = ch_grad_type

Sub set_default_choices()
  ch_ch1_enabled    = Disable
  ch_ch1_mult       = 1.0
  ch_ch1_offset     = 0
  ch_ch2_enabled    = Disable
  ch_ch2_mult       = 1.0
  ch_ch2_offset     = 0
  ch_cp_co2_enabled = Disable
  ch_cp_co2_mult    = 1.0
  ch_cp_co2_offset  = 0
  ch_cp_h2o_enabled = Disable
  ch_cp_h2o_mult    = 1.0
  ch_cp_h2o_offset  = 0
  ch_tmpr_enabled   = Disable
  ch_tmpr_state     = Standby
  ch_tmpr_top_btm   = 0.0
  ch_sonic_azimuth  = 0
  ch_toggle_time    = 5 'in minutes
  ch_inlet_top_H    = 0
  ch_inlet_btm_H    = 0
  ch_tmpr_top_H     = 0
  ch_tmpr_btm_H     = 0
  ch_grad_type      = Logarithmic
EndSub

''''''''''''''' DATA TABLES ''''''''''''''''
DataTable(gradient_info,True,50)
  CardOut(0,1000)
  Sample(1,sonic_azimuth,FP2)
  Sample(1,toggle_time,FP2)
  Sample(1,inlet_btm_H,FP2)
  Sample(1,inlet_top_H,FP2)
  Sample(1,gas_gradient_H,FP2)
  Sample(1,ch1_enabled,Boolean)
  Sample(1,ch1_mult,FP2)
  Sample(1,ch1_offset,FP2)
  Sample(1,ch2_enabled,Boolean)
  Sample(1,ch2_mult,FP2)
  Sample(1,ch2_offset,FP2)
  Sample(1,tmpr_enabled,Boolean)
  Sample(1,(tmpr_state=Normal),Boolean)
    FieldNames("tmpr_normal")
  Sample(1,(tmpr_state=Calibrating),Boolean)
    FieldNames("tmpr_calibrating")
  Sample(1,tmpr_top_btm,IEEE4)
    FieldNames("tmpr_top_less_btm")
  Sample(1,tmpr_btm_H,FP2)
  Sample(1,tmpr_top_H,FP2)
  Sample(1,tmpr_gradient_H,FP2)
  Sample(1,cp_co2_enabled,Boolean)
  Sample(1,cp_co2_mult,FP2)
  Sample(1,cp_co2_offset,FP2)
  Sample(1,cp_h2o_enabled,Boolean)
  Sample(1,cp_h2o_mult,FP2)
  Sample(1,cp_h2o_offset,FP2)
  Sample(1,grad_type,Boolean)
EndTable

DataTable (gradient_tsdata,True,-1)
	DataInterval (0,SCAN_INTV,Sec,1)
  CardOut(1,-1)

	Sample(1,is_sampling_top,Boolean)
'	Sample(1,is_sampling_mid,Boolean)

  Sample(1,ch1_value,IEEE4)
  Sample(1,ch2_value,IEEE4)
  
  Sample(1,cp_CO2_value,IEEE4)
  Sample(1,cp_H2O_value,IEEE4)
  
  Sample(1,tmpr_state,FP2)
  Sample(1,tmpr_btm,IEEE4)
'  Sample(1,tmpr_mid,IEEE4)
  Sample(1,tmpr_top,IEEE4)
EndTable

DataTable(tmpr_cal,(tmpr_state=Calibrating),-1)
  DataInterval(0,CAL_INTV,Sec,10)
  CardOut(1,1000)
  Average(1,tmpr_btm,IEEE4,tmpr_btm=NAN)
'  Average(1,tmpr_mid,IEEE4,tmpr_mid=NAN)
  Average(1,tmpr_top,IEEE4,tmpr_top=NAN)
  Average(1,(tmpr_top-tmpr_btm),IEEE4,(tmpr_top=NAN OR tmpr_btm=NAN))
    FieldNames("diff_top_less_btm")
    Units diff_top_less_btm = degC
EndTable

DataTable(work_stats,True,10)
  DataInterval(0,STATS_INTV,Sec,10)
  
  Average(1,ch1_btm,IEEE4,ch1_btm=NAN)
  Average(1,ch1_top,IEEE4,ch1_top=NAN)
  Average(1,ch2_btm,IEEE4,ch2_btm=NAN)
  Average(1,ch2_top,IEEE4,ch2_top=NAN)

  Average(1,cp_CO2_btm,IEEE4,cp_CO2_btm=NAN)
  Average(1,cp_CO2_top,IEEE4,cp_CO2_top=NAN)
  Average(1,cp_H2O_btm,IEEE4,cp_H2O_btm=NAN)
  Average(1,cp_H2O_top,IEEE4,cp_H2O_top=NAN)

  Average(1,tmpr_btm,FP2,tmpr_btm=NAN OR tmpr_state<>Normal)
  Average(1,tmpr_top,FP2,tmpr_top=NAN OR tmpr_state<>Normal)
EndTable

DataTable(gradient_stats,True,-1)
  DataInterval(0,STATS_INTV,Sec,10)
  CardOut(1,-1)
  
  Sample(1,ch1_btm_Avg,FP2)
  Sample(1,ch1_top_Avg,FP2)
  Sample(1,ch2_btm_Avg,FP2)
  Sample(1,ch2_top_Avg,FP2)
  
  Sample(1,cp_CO2_btm_Avg,FP2)
  Sample(1,cp_CO2_top_Avg,FP2)
  Sample(1,cp_H2O_btm_Avg,FP2)
  Sample(1,cp_H2O_top_Avg,FP2)

  Sample(1,tmpr_btm_Avg,FP2)
  Sample(1,tmpr_top_Avg,FP2)
  
  'TODO add gradient, flux stats
  
  Average(1,logger_voltage,FP2,logger_voltage=NAN)
  Average(1,logger_temp,FP2,logger_temp=NAN)
EndTable

'''''''''''' SUBROUTINES ''''''''''''''''
Sub populate_choices()
  Move(choice(1),NUM_SETTINGS,settings(1),NUM_SETTINGS)
EndSub

Sub save_current_choices()
  Move(settings(1),NUM_SETTINGS,choice(1),NUM_SETTINGS)

  'Input validation
  toggle_intv = toggle_time * 60
  While (sonic_azimuth < 0)
    sonic_azimuth = (sonic_azimuth+360)
  Wend
  sonic_azimuth = sonic_azimuth MOD 360
  
  'Update dependent states
  If (inlet_top_H > 0 AND inlet_btm_H > 0) Then
    If (grad_type = Logarithmic) Then
      gas_gradient_H = SQR(inlet_top_H * inlet_btm_H)
    ElseIf (grad_type = Linear) Then
      gas_gradient_H = (inlet_top_H + inlet_btm_H)/2
    Else
      gas_gradient_H = 0
    EndIf
  Else
    gas_gradient_H = 0
  EndIf
  If (tmpr_top_H > 0 AND tmpr_btm_H > 0) Then
    If (grad_type = Logarithmic) Then
      tmpr_gradient_H = SQR(tmpr_top_H * tmpr_btm_H)
    ElseIf (grad_type = Linear) Then
      tmpr_gradient_H = (tmpr_top_H + tmpr_btm_H)/2
    Else
      tmpr_gradient_H = 0
    EndIf
  Else
    tmpr_gradient_H = 0
  EndIf
  If (NOT ch1_enabled) Then ch1_value = NAN
  If (NOT ch2_enabled) Then ch2_value = NAN
  If (NOT cp_co2_enabled) Then cp_CO2_value = NAN
  If (NOT cp_h2o_enabled) Then cp_H2O_value = NAN
  If (NOT tmpr_enabled) Then Move(tmpr(1),3,NAN,1)

  Calfile(settings,NUM_SETTINGS,SETTINGS_FILE,WRITEFILE)
  CallTable(gradient_info)
EndSub

''''''''''''''' MENU '''''''''''''''
Const Yes = True
Const Cancel = False
DisplayMenu("Gradient setup", 0) 'as submenu to main
  SubMenu("Gas gradient")
    MenuItem("Dwell time, min", ch_toggle_time)
      'TODO figure out best-compatible values for future 3rd level addition
      MenuPick(1, 1.5, 2, 3, 5, 6, 10, 15)
    MenuItem("# levels", num_levels)
      MenuPick(2)',3)
    MenuItem("Top inlet H, cm", ch_inlet_top_H
    MenuItem("Btm inlet H, cm", ch_inlet_btm_H
  EndSubMenu
  SubMenu("Analog input")
    MenuItem("Chan 1 recording", ch_ch1_enabled)
      MenuPick(Disable, Enable)
    MenuItem("Chan 1 mult)", ch_ch1_mult)
    MenuItem("Chan 1 offset", ch_ch1_offset)
    MenuItem("Chan 2 recording", ch_ch2_enabled)
      MenuPick(Disable, Enable)
    MenuItem("Chan 2 mult", ch_ch2_mult)
    MenuItem("Chan 2 offset", ch_ch2_mult)
  EndSubMenu
  SubMenu("Thermistors")
    MenuItem("Recording", ch_tmpr_enabled)
      MenuPick(Disable,Enable)
    MenuItem("Set mode", ch_tmpr_state)
      MenuPick(Standby, Normal, Calibrating)
    MenuItem("Top height, cm", ch_tmpr_top_H
    MenuItem("Btm height, cm", ch_tmpr_btm_H
    MenuItem("Top-btm offset, degC", ch_tmpr_top_btm)
    ' XXX maybe ability change duration of calibration stats output (from 1min)
  EndSubMenu
  SubMenu("Closed-path IRGA")
    MenuItem("CO2 recording", ch_cp_co2_enabled)
      MenuPick(Disable, Enable)
    MenuItem("CO2 mult", ch_cp_co2_mult)
    MenuItem("CO2 offset", ch_cp_co2_offset)
    MenuItem("H2O recording", ch_cp_h2o_enabled)
      MenuPick(Disable, Enable)
    MenuItem("H2O mult", ch_cp_h2o_mult)
    MenuItem("H2O offset", ch_cp_h2o_offset)
  EndSubMenu
  SubMenu("Other")
    MenuItem("Sonic azimuth, deg TN", ch_sonic_azimuth)
    MenuItem("Gradient type", ch_grad_type)
      MenuPick(Logarithmic, Linear)
  EndSubMenu
  SubMenu("Save changes")
    MenuItem("Save now?", save_changes)
    MenuPick(Cancel,Yes) ' TODO add "Discard" here
    ' TODO add a set default here
  EndSubMenu
EndMenu


''''''''''''''' MAIN PROGRAM '''''''''''''''
BeginProg
  filehandle = FileOpen(SETTINGS_FILE,"rb",0)
  FileClose(filehandle)
  If (filehandle = 0) Then 'file was not found
    set_default_choices()
  Else
    Calfile(settings,NUM_SETTINGS,SETTINGS_FILE,READFILE)
    populate_choices()
  EndIf
  save_current_choices()

  is_sampling_top = False
  is_sampling_mid = False
  'no need for bottom state indicator; both top/mid false implies bottom=true
  
	Scan (SCAN_INTV,Sec,0,0)
  
    If (ch1_enabled) Then
      VoltDiff(ch1_value,1,mv5000,CH1_IO,1,0,INTEG,ch1_mult,ch1_offset)
    EndIf
    If (ch2_enabled) Then
      VoltDiff(ch2_value,1,mv5000,CH2_IO,1,0,INTEG,ch2_mult,ch2_offset)
    EndIf
    If (cp_co2_enabled) Then
      VoltDiff(cp_CO2_value,1,mv5000,CP_CO2_IO,1,0,INTEG,cp_co2_mult,cp_co2_offset)
    EndIf
    If (cp_h2o_enabled) Then
      VoltDiff(cp_H2O_value,1,mv5000,CP_H2O_IO,1,0,INTEG,cp_h2o_mult,cp_h2o_offset)
    EndIf
    If (tmpr_state) Then
      Therm107(tmpr_btm,1,TMPR_BTM_IO,TMPR_VX_IO,0,INTEG,TMPR_MULT,TMPR_OFF)
      If (num_levels = 3) Then
        Therm107(tmpr_mid,1,TMPR_MID_IO,TMPR_VX_IO,0,INTEG,TMPR_MULT,TMPR_OFF)
      EndIf
      Therm107(tmpr_top,1,TMPR_TOP_IO,TMPR_VX_IO,0,INTEG,TMPR_MULT,TMPR_OFF)
    EndIf
    
		PanelTemp (logger_temp,INTEG)
		Battery (logger_voltage)

    If ( TimeIntoInterval(0,toggle_intv,Sec)) Then 
      If (num_levels = 3) Then
        If (is_sampling_mid) Then
          is_sampling_top = True
          is_sampling_mid = False
          valve_state = TOP
        ElseIf (is_sampling_top) Then
          is_sampling_top = False
          'is_sampling_mid should still be False
          valve_state = BOTTOM
        Else
          'is_sampling_top should still be False
          is_sampling_mid = True
          valve_state = MIDDLE
        EndIf
      Else 'FOR ONLY TWO LEVELS
        is_sampling_top = NOT is_sampling_top
        is_sampling_mid = False 'catch case of switch 3->2 levels while sampling mid
        valve_state = IIF(is_sampling_top, TOP, BOTTOM)
      EndIf
      
      PortSet(VALVE_1_CTRL, is_sampling_top)
      PortSet(VALVE_2_CTRL, is_sampling_mid)
      Move(conc(1),6,NAN,1)
      Move(cp_irga(1),6,NAN,1)
    EndIf

    'record measurements into correct level variable set
    'other variables are set to NAN during source level transition
    If (is_sampling_mid) Then
      ch1_mid = ch1_value
      ch2_mid = ch2_value
      cp_CO2_mid = cp_CO2_value
      cp_H2O_mid = cp_H2O_value
    ElseIf (is_sampling_top) Then
      ch1_top = ch1_value
      ch2_top = ch2_value
      cp_CO2_top = cp_CO2_value
      cp_H2O_top = cp_H2O_value
    Else
      ch1_btm = ch1_value
      ch2_btm = ch2_value
      cp_CO2_btm = cp_CO2_value
      cp_H2O_btm = cp_H2O_value
    EndIf
    
		CallTable gradient_tsdata
		CallTable tmpr_cal
		
		CallTable work_stats		
    If ( work_stats.Output(1,1) ) Then
      GetRecord(stats_out(1),work_stats,1)
      ' TODO gradient calculations
      ' 
      ' XXX account for height=0, set gradient=NAN
      CallTable gradient_stats
    EndIf
		
    If (save_changes) Then
      save_changes = False
      save_current_choices()  
    EndIf
	NextScan 
EndProg


