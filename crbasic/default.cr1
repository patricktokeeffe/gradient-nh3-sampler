''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Aerodynamic Gradient Method Flux Measurement System
'
' Laboratory for Atmospheric Research
' Department of Civil & Environmental Engineering
' Washington State University
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'============================ CONST SETTINGS ==================================
Const SDM_CSAT3A_EC150_1 = 1 'aliases for menu, trailing # is workaround for
Const SDM_CSAT3_LI7500_2 = 2 '  logical display in custom menu
Const RS232_CSAT3_LI7500_3 = 3
ConstTable
  'things which MUST be constants and therefore cannot be in settings file
  'these settings are retained across power cycles like "soft" settings
  Const UTC_OFFSET = -8  'default: Pacific Standard Time

  Const GPS_ENABLED = True
  Const DATA_SRCS = RS232_CSAT3_LI7500_3

  Const SDM_SPEED = 30   'default: 30 usec, specify 8 - 3000 (8 us - 3 ms)
  Const CSAT3_ADDR = 3   'CSAT3 SDM address, default: 3
  Const LI7500_ADDR = 7  'LI7500 SDM address, default: 7
  Const EC100_ADDR = 1   'EC100/EC150/CSAT3A SDM address, default: 1

  Const CSAT3_BAUD = 9600   '9600 or 19200
  Const LI7500_BAUD = 38400 '19200 or 38400 (9600 is too slow!)

  Const DF1_ENABLED = True 'XXX 
  Const DF2_ENABLED = True
  Const DF3_ENABLED = True
  Const DF4_ENABLED = True
  Const CP_CO2_ENABLED = True
  Const CP_H2O_ENABLED = True
  Const TMPR_ENABLED = True
EndConstTable


'================================= WIRING =====================================
'trace gas analyzer analog input
Const DF1_IO = 1 'DF
Const DF2_IO = 2 'DF
Const DF3_IO = 3 'DF
Const DF4_IO = 4 'DF

'closed-path CO2/H2O analyzer
Const CP_CO2_IO = 5 'DF
Const CP_H2O_IO = 6 'DF

'aspirated temperature sensors
Const TMPR_BTM_IO = 14 'SE
Const TMPR_MID_IO = 15 'SE
Const TMPR_TOP_IO = 16 'SE
Const TMPR_VX_IO = Vx3

'RS-232 devices
Const CSAT3_COM = Com1  'C1 C2
Const LI7500_COM = Com2 'C3 C4
Const GPS_COM = Com3    'C5 C6

'level-selection valves
Const VALVE_1_CTRL = 7   'C7
' Control selection of bottom- or top-level sampling lines
'   Normally Open ---------- Bottom level (closest to ground) inlet
'   Normally Closed -------- Top level (farthest from fround) inlet
'   Common ----------------- EITHER (a) to analyzer delivery
'                                   (b) Valve #2 NO
Const VALVE_2_CTRL = 8   'C8
' Control selection of mid-level sampling line or other valve (top/btm lines)
'   Normally Open ---------- Valve #1 Common
'   Normally Closed -------- Middle level (between bottom, top) inlet
'   Common ----------------- To analyzer delivery


'============================ CONSTANTS =======================================
'----- PHYSICAL -----
Const MW_co2 = 44.010    'molecular weight of carbon dioxide, g/mol
Const MW_h2o = 18.01528  'molecular weight of water vapor, g/mol

'----- PROGRAM OPERATION ------
Const FAST_INTV = 100     'eddy cov. scan frequency, ms
Const SLOW_INTV = 1       'gradient scan frequency, sec
Const STATS_INTV = 30     'interval of statistics output, min
Const CAL_INTV = 60       'interval of themistor cal. stats output, sec
Const INTEG = 250

'----- SDM DEVICES -----
Const CSAT3_CMD = 91 'trigger + get 3D wind, temp, diagnostic
Const CSAT3_OPT = INT(1000/FAST_INTV) 'calc Hz from interval
Const LI7500_CMD = 6 'get CO2, H2O, press, diagnostic
Const EC100_CMD = 1 'get 3D wind, temp, CO2, H2O, press, (2) diagnostic

'----- GPS -----
Const MAX_DIFF = -1 'XXX
Const DAILY_MEDNUM = 480

'----- STATIC ANALOG SCALING -----
'TODO closed-path IRGA

Const TMPR_MULT = 1  'use Celcius for thermistors
Const TMPR_OFF = 0


'============================= VARIABLES =====================================

'----- SENSORS -----
'public view of valve status
Public valve_state As String * 8
Const TOP = "top"
Const MIDDLE = "middle"
Const BOTTOM = "bottom"

'measurements from DF1-4
Public raw_conc(4)
Alias raw_conc(1) = df1_value
Alias raw_conc(2) = df2_value
Alias raw_conc(3) = df3_value
Alias raw_conc(4) = df4_value
Units raw_conc = unit

'level-partitioned readings of DF1-4
Public conc(12)
Alias conc(1)  = df1_btm
Alias conc(2)  = df1_mid
Alias conc(3)  = df1_top
Alias conc(4)  = df2_btm
Alias conc(5)  = df2_mid
Alias conc(6)  = df2_top
Alias conc(7)  = df3_btm
Alias conc(8)  = df3_mid
Alias conc(9)  = df3_top
Alias conc(10) = df4_btm
Alias conc(11) = df4_mid
Alias conc(12) = df4_top
Units conc = unit

'measurements from sonic anemometer & open-path CO2/H2O analyer
Dim ec100_raw(12) 'Campbellsci EC100/EC150/CSAT3A
'EC150 reports in mass density, not molar density!

Public sonic(5)
Alias sonic(1) = sonic_Ux
Alias sonic(2) = sonic_Uy
Alias sonic(3) = sonic_Uz
Alias sonic(4) = sonic_Ts
Alias sonic(5) = sonic_diag
Units sonic = m/s
Units sonic_Ts = degC
Units sonic_diag = bitmap
Public disable_sonic As Boolean 

Public op_irga(4)
Alias op_irga(1) = op_CO2
Alias op_irga(2) = op_H2O
Alias op_irga(3) = op_press
Alias op_irga(4) = op_diag
Units op_irga = mmol/m^3
Units op_press = kPa
Units op_diag = bitmap
Public disable_op As Boolean

#If (DATA_SRCS=SDM_CSAT3A_EC150_1) Then
  Public extra_irga(3)
#Else
  Dim extra_irga(3) 'hide from Public menu if not using
#EndIf
Alias extra_irga(1) = op_temp
Alias extra_irga(2) = op_co2_signal
Alias extra_irga(3) = op_h2o_signal
Units op_temp = degC
Units op_co2_signal = ratio
Units op_h2o_signal = ratio

'serial input handling for sensors in RS-232 mode
Dim bytes
Dim csat3_record As String * 10
Dim csat3_rbits(2,3) = {&h0C00, &h0300, &hC0, 10, 8, 6}
Dim csat3_ranges(4) = {0.00025, 0.00050, 0.001, 0.002}
Dim byte1 As Long, word4 As Long
Dim i As Long, ii As Long, rcode As Long
Dim li7500_record As String * 25
Dim li7500_vals(4) As Float 'diag, CO2 density, H2O density, pressure

'measurements from closed-path CO2/H2O analyzer
Public raw_cp_irga(2)
Alias raw_cp_irga(1) = cp_CO2_value
Alias raw_cp_irga(2) = cp_H2O_value

' TODO !!!! Determine a specific set of input units for CO2/H2O

'level-partitioned readings of closed-path CO2/H2O
Public cp_irga(6)
Alias cp_irga(1) = cp_CO2_btm
Alias cp_irga(2) = cp_CO2_mid
Alias cp_irga(3) = cp_CO2_top
Alias cp_irga(4) = cp_H2O_btm
Alias cp_irga(5) = cp_H2O_mid
Alias cp_irga(6) = cp_H2O_top

'measurements from aspirated themistors
Public tmpr(3)
Alias tmpr(1) = tmpr_btm
Alias tmpr(2) = tmpr_mid
Alias tmpr(3) = tmpr_top
Units tmpr = degC

'GPS receiver
#If (GPS_ENABLED) Then
  Dim nmea_str As String * 90
  Public gps16x(15)
  Alias gps16x(1)  = lat_deg        '(+)=North, (-)=South
  Alias gps16x(2)  = lat_min
  Alias gps16x(3)  = long_deg       '(+)=East, (-)=West
  Alias gps16x(4)  = long_min
  Alias gps16x(5)  = speed
  Alias gps16x(6)  = course
  Alias gps16x(7)  = mag_var        '(+)=East, (-)=West
  Alias gps16x(8)  = fix_quality
  Alias gps16x(9)  = num_sat
  Alias gps16x(10) = altitude
  Alias gps16x(11) = since_pps
  Alias gps16x(12) = since_gprmc
  Alias gps16x(13) = gps_ready
  Alias gps16x(14) = max_clock_change
  Alias gps16x(15) = num_clock_change
  Units speed = m/s
  Units course = degEofN
  Units mag_var = degEofN
  Units fix_quality = unitless
  Units num_sat = count
  Units altitude = m
  Units since_pps = ms
  Units since_gprmc = s
  Units max_clock_change = ms
  Units num_clock_change = occurrences
#EndIf

'data logger built-in sensors
Public logger_temp, logger_voltage
Units logger_temp = degC
Units logger_voltage = volts

'----- PROCESSING -----
'TODO
'Dim lagged(10)
'Public aligned(10)
'Alias aligned(1)  = lag_Ux
'Alias aligned(2)  = lag_Uy
'Alias aligned(3)  = lag_Uz
'Alias aligned(4)  = lag_Ts
'Alias aligned(5)  = lag_sonic_diag
'Alias aligned(6)  = lag_op_CO2
'Alias aligned(7)  = lag_op_H2O
'Alias aligned(8)  = lag_op_press
'XXX ambient temp?
'Alias aligned(9)  = lag_op_diag
'Alias aligned(10) = lag_op_signal
'Units lag_Ux = m/s
'Units lag_Uy = m/s
'Units lag_Uz = m/s
'Units lag_Ts = degC
'Units lag_sonic_diag = bitmap
'Units lag_op_CO2 = mmol/m^3
'Units lag_op_H2O = mmol/m^3
'Units lag_op_press = kPa
'Units lag_op_diag = bitmap
'Units lag_op_signal = ratio

Public cov_array(1,4)  '= [ [Uz, Ts, CO2, H2O] ]

'for post-statistics manipulation
Public work_out(36) 'match length of work table
Alias work_out(1)  = sonic_Ts_Avg
Alias work_out(2)  = Uz_Std
Alias work_out(3)  = cov_Uz_Ts
Alias work_out(4)  = cov_Uz_CO2
Alias work_out(5)  = cov_Uz_H2O
Alias work_out(6)  = sonic_Ts_Std
'Alias work_out(7)  = cov_Ts_CO2
'Alias work_out(8)  = cov_Ts_H2O
Alias work_out(9)  = op_CO2_Std
'Alias work_out(10) = cov_CO2_H2O
Alias work_out(11) = op_H2O_Std
Alias work_out(12)  = WS_sclr_Avg
Alias work_out(13)  = WD_unit_Avg
Alias work_out(14)  = WD_unit_Std
'Alias work_out(15)  = dup: WS_sclr_Avg
Alias work_out(16)  = WS_rslt_Avg
Alias work_out(17)  = WD_rslt_Avg
Alias work_out(18)  = WD_rslt_Std
Alias work_out(19)  = op_CO2_Avg
Alias work_out(20) = op_H2O_Avg
Alias work_out(21) = op_press_Avg
Alias work_out(22) = op_temp_Avg
Alias work_out(23)  = df1_btm_Avg
Alias work_out(24)  = df1_top_Avg
Alias work_out(25)  = df2_btm_Avg
Alias work_out(26)  = df2_top_Avg
Alias work_out(27)  = df3_btm_Avg
Alias work_out(28)  = df3_top_Avg
Alias work_out(29)  = df4_btm_Avg
Alias work_out(30)  = df4_top_Avg
Alias work_out(31)  = cp_CO2_btm_Avg
Alias work_out(32) = cp_CO2_top_Avg
Alias work_out(33) = cp_H2O_btm_Avg
Alias work_out(34) = cp_H2O_top_Avg
Alias work_out(35) = tmpr_btm_Avg
Alias work_out(36) = tmpr_top_Avg

Units sonic_Ts_Avg = degC
Units sonic_Ts_Std = degC
Units Uz_Std = m/s
Units WS_sclr_Avg = m/s
Units WD_unit_Avg = degEofN
Units WD_unit_Std = deg
Units WS_rslt_Avg = m/s
Units WD_rslt_Avg = degEofN
Units WD_rslt_Std = deg
Units op_CO2_Avg = mmol/m^3
Units op_H2O_Avg = mmol/m^3
Units op_press_Avg = kPa
Units op_temp_Avg = degC
Units op_CO2_Std = mmol/m^3
Units op_H2O_Std = mmol/m^3

'Units df1..4 TODO
'Units cp CO2/H2O TODO
Units tmpr_btm_Avg = degC
Units tmpr_top_Avg = degC

Public gas_gradient(4)
Alias gas_gradient(1) = df1_gradient
Alias gas_gradient(2) = df2_gradient
Alias gas_gradient(3) = df3_gradient
Alias gas_gradient(4) = df4_gradient
Units gas_gradient = unit/m

Public cp_gradient(2)
Alias cp_gradient(1) = cp_co2_gradient
Alias cp_gradient(2) = cp_h2o_gradient
'Units TODO !

'gradient & flux calculation variables
Public tmpr_gradient
Units tmpr_gradient = degC/m

Public tmpr_gradient_H
Units tmpr_gradient_H = cm

Public gas_gradient_H
Units gas_gradient_H = cm

Dim gas_denom, tmpr_denom

Public K_estimates(4)
Alias K_estimates(1) = K_para
Alias K_estimates(2) = K_h
Alias K_estimates(3) = K_co2
Alias K_estimates(4) = K_w

'XXX
Public fluxest_df1


'inter-table flagging
Dim just_had_1hz_scan As Boolean
Dim inbetween_1hz_scan As Boolean

'level-selection valve control
Dim num_levels = {2} '2 or 3, determines if mid level is sampled
Dim valve_on(2) As Boolean
Alias valve_on(1) = is_sampling_top 'else bottom
Alias valve_on(2) = is_sampling_mid 'else top or bottom

'control whether/where themistor data is storeds; aligned to boolean as in:
Const Normal = -1 'True
Const Calibrating = 1 'True * -1
Const Standby = 0 'False

'============================ SETTINGS RETENTION ==============================
Dim filehandle As Long
Const SETTINGS_FILE = "CPU:grad_settings.dat"
Const NUM_SETTINGS = {21}
Const WRITEFILE = 0
Const READFILE = 1

Const Logarithmic = 0
Const Linear = -1

'needed to retain whole # equivalent of toggle_time for use in TimeIntoInterval
Dim toggle_intv As Long 'seconds

Dim settings(NUM_SETTINGS)
Alias settings(1)  = df1_mult
Alias settings(2)  = df1_offset
Alias settings(3)  = df2_mult
Alias settings(4)  = df2_offset
Alias settings(5)  = df3_mult
Alias settings(6)  = df3_offset
Alias settings(7)  = df4_mult
Alias settings(8)  = df4_offset
Alias settings(9)  = cp_co2_mult
Alias settings(10) = cp_co2_offset
Alias settings(11) = cp_h2o_mult
Alias settings(12) = cp_h2o_offset
Alias settings(13) = tmpr_state
Alias settings(14) = tmpr_top_btm 'cal. offset
Alias settings(15) = sonic_azimuth
Alias settings(16) = toggle_time
Alias settings(17) = inlet_top_H
Alias settings(18) = inlet_btm_H
Alias settings(19) = tmpr_top_H
Alias settings(20) = tmpr_btm_H
Alias settings(21) = grad_type
Units df1_mult = unit/mV
Units df1_offset = unit@0mV
Units df2_mult = unit/mV
Units df2_offset = unit@0mV
Units df3_mult = unit/mV
Units df3_offset = unit@0mV
Units df4_mult = unit/mV
Units df4_offset = unit@0mV
'Units cp_co2_mult = ?
'Units cp_co2_offset = ?
'Units cp_h2o_mult = ?
'Units cp_h2o_offset = ? 
Units tmpr_top_btm = degC
Units sonic_azimuth = deg TN
Units toggle_time = min
Units inlet_top_H = cm
Units inlet_btm_H = cm
Units tmpr_top_H = cm
Units tmpr_btm_H = cm

Dim choice(NUM_SETTINGS)
Alias choice(1)  = ch_df1_mult
Alias choice(2)  = ch_df1_offset
Alias choice(3)  = ch_df2_mult
Alias choice(4)  = ch_df2_offset
Alias choice(5)  = ch_df3_mult
Alias choice(6)  = ch_df3_offset
Alias choice(7)  = ch_df4_mult
Alias choice(8)  = ch_df4_offset
Alias choice(9)  = ch_cp_co2_mult
Alias choice(10) = ch_cp_co2_offset
Alias choice(11) = ch_cp_h2o_mult
Alias choice(12) = ch_cp_h2o_offset
Alias choice(13) = ch_tmpr_state
Alias choice(14) = ch_tmpr_top_btm
Alias choice(15) = ch_sonic_azimuth
Alias choice(16) = ch_toggle_time
Alias choice(17) = ch_inlet_top_H
Alias choice(18) = ch_inlet_btm_H
Alias choice(19) = ch_tmpr_top_H
Alias choice(20) = ch_tmpr_btm_H
Alias choice(21) = ch_grad_type

'=========================== DATA TABLES ====================================

'TODO use aligned sonic/op IRGA data

'----- WORKING TABLES -----
DataTable(work,True,10)
  DataInterval(0,STATS_INTV,Min,10)

  Average(1,sonic_Ts,IEEE4,sonic_Ts=NAN)
  Covariance(4,cov_array(1,1),IEEE4,disable_sonic OR disable_op,10)
  WindVector(1,-1*sonic_Uy,sonic_Ux,IEEE4,disable_sonic,0,1,0)
  WindVector(1,-1*sonic_Uy,sonic_Ux,IEEE4,disable_sonic,0,1,2)
  Average(1,op_CO2,IEEE4,disable_op)
  Average(1,op_H2O,IEEE4,disable_op)
  Average(1,op_press,IEEE4,disable_op)
  Average(1,op_temp,IEEE4,disable_op)

  Average(1,df1_btm,IEEE4,df1_btm=NAN OR inbetween_1hz_scan)
  Average(1,df1_top,IEEE4,df1_top=NAN OR inbetween_1hz_scan)
  Average(1,df2_btm,IEEE4,df2_btm=NAN OR inbetween_1hz_scan)
  Average(1,df2_top,IEEE4,df2_top=NAN OR inbetween_1hz_scan)
  Average(1,df3_btm,IEEE4,df3_btm=NAN OR inbetween_1hz_scan)
  Average(1,df3_top,IEEE4,df3_top=NAN OR inbetween_1hz_scan)
  Average(1,df4_btm,IEEE4,df4_btm=NAN OR inbetween_1hz_scan)
  Average(1,df4_top,IEEE4,df4_top=NAN OR inbetween_1hz_scan)
  Average(1,cp_CO2_btm,IEEE4,cp_CO2_btm=NAN OR inbetween_1hz_scan)
  Average(1,cp_CO2_top,IEEE4,cp_CO2_top=NAN OR inbetween_1hz_scan)
  Average(1,cp_H2O_btm,IEEE4,cp_H2O_btm=NAN OR inbetween_1hz_scan)
  Average(1,cp_H2O_top,IEEE4,cp_H2O_top=NAN OR inbetween_1hz_scan)
  Average(1,tmpr_btm,FP2,tmpr_btm=NAN OR tmpr_state<>Normal OR inbetween_1hz_scan)
  Average(1,tmpr_top,FP2,tmpr_top=NAN OR tmpr_state<>Normal OR inbetween_1hz_scan)
EndTable

'----- FINAL OUTPUTS -----
#If (GPS_ENABLED) Then
  DataTable (gps_daily,TRUE,30)
    DataInterval (0,1,Day,10)
    CardOut(0,90)
    Median(1,(lat_deg + lat_min/60),DAILY_MEDNUM,IEEE4,(lat_deg=NAN OR lat_min=NAN))
      FieldNames("latitude_Med")
      Units latitude_Med = degN
    Median(1,(long_deg + long_min/60),DAILY_MEDNUM,IEEE4,(long_deg=NAN OR long_min=NAN))
      FieldNames("longitude_Med")
      Units longitude_Med = degE
    Median(1,mag_var,DAILY_MEDNUM,FP2,mag_var=NAN)
    Average(1,num_sat,FP2,num_sat=NAN)
    Median(1,altitude,DAILY_MEDNUM,IEEE4,altitude=NAN)
    Average(1,altitude,IEEE4,altitude=NAN)
    Minimum(1,gps_ready,FP2,gps_ready=NAN,0)
    Sample(1,max_clock_change,UINT2)
    Sample(1,num_clock_change,UINT2)
  EndTable
#EndIf

DataTable(info,True,100)
  CardOut(0,1000)
  Sample(1,toggle_time,FP2)
  Sample(1,inlet_btm_H,FP2)
  Sample(1,inlet_top_H,FP2)
  Sample(1,gas_gradient_H,FP2)
  Sample(1,grad_type,Boolean)
'  Sample(1,sonic_azimuth,FP2) 'XXX
'  Sample(1,sonic_height,FP2) 'XXX
  #If (DF1_ENABLED) Then
    Sample(1,df1_mult,FP2)
    Sample(1,df1_offset,FP2)
  #EndIf
  #If (DF2_ENABLED) Then
    Sample(1,df2_mult,FP2)
    Sample(1,df2_offset,FP2)
  #EndIf
  #If (DF3_ENABLED) Then
    Sample(1,df3_mult,FP2)
    Sample(1,df3_offset,FP2)
  #EndIf
  #If (DF4_ENABLED) Then
    Sample(1,df4_mult,FP2)
    Sample(1,df4_offset,FP2)
  #EndIf
  #If (CP_CO2_ENABLED) Then
    Sample(1,cp_co2_mult,FP2)
    Sample(1,cp_co2_offset,FP2)
  #EndIf
  #If (CP_H2O_ENABLED) Then
    Sample(1,cp_h2o_mult,FP2)
    Sample(1,cp_h2o_offset,FP2)
  #EndIf
  #If (TMPR_ENABLED) Then
    Sample(1,(tmpr_state=Normal),Boolean)
      FieldNames("tmpr_normal")
    Sample(1,(tmpr_state=Calibrating),Boolean)
      FieldNames("tmpr_calibrating")
    Sample(1,tmpr_top_btm,IEEE4)
     FieldNames("tmpr_top_less_btm")
    Sample(1,tmpr_btm_H,FP2)
    Sample(1,tmpr_top_H,FP2)
    Sample(1,tmpr_gradient_H,FP2)
  #EndIf
  #If (GPS_ENABLED) Then
    Sample(1,UTC_OFFSET,FP2)
      FieldNames("UTC_offset")
      Units UTC_OFFSET = hours
  #EndIf
  Sample(1,DATA_SRCS,FP2)
    FieldNames("eddycov_sensors")
  #If (DATA_SRCS=SDM_CSAT3A_EC150_1) Then
    Sample(1,EC100_ADDR,UINT2)
      FieldNames("EC100_SDM_address")
  #ElseIf (DATA_SRCS=SDM_CSAT3_LI7500_2) Then
    Sample(1,CSAT3_ADDR,UINT2)
      FieldNames("CSAT3_SDM_address")
    Sample(1,LI7500_ADDR,UINT2)
      FieldNames("LI7500_SDM_address")
  #ElseIf (DATA_SRCS=RS232_CSAT3_LI7500_3) Then
    Sample(1,CSAT3_BAUD,UINT2)
      FieldNames("CSAT3_baud_rate")
    Sample(1,LI7500_BAUD,UINT2)
      FieldNames("LI7500_baud_rate")
  #EndIf
'  Sample(1,Status.CompileResults,String) 'XXX
'    FieldNames("CompileResults")
'  Sample(1,Status.CardStatus,String)
'    FieldNames("CardStatus")
'  Sample(1,Status.RunSignature,UINT2) 'program information
'    FieldNames("RunSig")
'  Sample(1,Status.ProgSignature,UINT2)
'    FieldNames("ProgSig")
EndTable

#If (TMPR_ENABLED) Then
  DataTable(tmpr_cal,(tmpr_state=Calibrating),90)
    DataInterval(0,CAL_INTV,Sec,10)
    CardOut(1,300)
    Average(1,tmpr_btm,IEEE4,tmpr_btm=NAN)
  '  Average(1,tmpr_mid,IEEE4,tmpr_mid=NAN)
    Average(1,tmpr_top,IEEE4,tmpr_top=NAN)
    Average(1,(tmpr_top-tmpr_btm),IEEE4,(tmpr_top=NAN OR tmpr_btm=NAN))
      FieldNames("diff_top_less_btm")
      Units diff_top_less_btm = degC
  EndTable
#EndIf

DataTable(ts_fast,True,-1)
  DataInterval(0,FAST_INTV,mSec,10)
  CardOut(1,-1) 'XXX fixed size calc?
  Sample(1,sonic_Ux,IEEE4)
  Sample(1,sonic_Uy,IEEE4)
  Sample(1,sonic_Uz,IEEE4)
  Sample(1,sonic_Ts,IEEE4)
  Sample(1,sonic_diag,UINT2)
  Sample(1,op_CO2,IEEE4)
  Sample(1,op_H2O,IEEE4)
  Sample(1,op_press,IEEE4)
  Sample(1,op_diag,UINT2)
  #If (DATA_SRCS=SDM_CSAT3A_EC150_1) Then
    Sample(1,op_temp,IEEE4)
    Sample(1,op_co2_signal,FP2)
    Sample(1,op_h2o_signal,FP2)
  #EndIf
EndTable

DataTable(ts_slow,True,-1)
  DataInterval(0,SLOW_INTV,Sec,10)
  CardOut(1,-1) 'XXX fixed size ?
  Sample(1,is_sampling_top,Boolean)
'  Sample(1,is_sampling_mid,Boolean)
  #If (DF1_ENABLED) Then
    Sample(1,df1_value,IEEE4)
  #EndIf
  #If (DF2_ENABLED) Then
    Sample(1,df2_value,IEEE4)
  #EndIf
  #If (DF3_ENABLED) Then
    Sample(1,df3_value,IEEE4)
  #EndIf
  #If (DF4_ENABLED) Then
    Sample(1,df4_value,IEEE4)
  #EndIf
  #If (CP_CO2_ENABLED) Then
    Sample(1,cp_CO2_value,IEEE4)
  #EndIf
  #If (CP_H2O_ENABLED) Then
    Sample(1,cp_H2O_value,IEEE4)  
  #EndIf
  #If (TMPR_ENABLED) Then
    Sample(1,tmpr_state,FP2)
    Sample(1,tmpr_btm,IEEE4)
    Sample(1,tmpr_top,IEEE4)
  #EndIf
EndTable

DataTable(stats,True,-1)
  DataInterval(0,STATS_INTV,Min,10)
  CardOut(1,-1)
  #If (DF1_ENABLED) Then
    Sample(1,df1_btm_Avg,FP2)
    Sample(1,df1_top_Avg,FP2)
    Sample(1,df1_gradient,IEEE4)
  #EndIf
  #If (DF2_ENABLED) Then
    Sample(1,df2_btm_Avg,FP2)
    Sample(1,df2_top_Avg,FP2)
    Sample(1,df2_gradient,IEEE4)
  #EndIf
  #If (DF3_ENABLED) Then
    Sample(1,df3_btm_Avg,FP2)
    Sample(1,df3_top_Avg,FP2)
    Sample(1,df3_gradient,IEEE4)
  #EndIf
  #If (DF4_ENABLED) Then
    Sample(1,df4_btm_Avg,FP2)
    Sample(1,df4_top_Avg,FP2)
    Sample(1,df4_gradient,IEEE4)
  #EndIf
  #If (CP_CO2_ENABLED) Then
    Sample(1,cp_CO2_btm_Avg,FP2)
    Sample(1,cp_CO2_top_Avg,FP2)
    Sample(1,cp_CO2_gradient,IEEE4)
  #EndIf
  #If (CP_H2O_ENABLED) Then
    Sample(1,cp_H2O_btm_Avg,FP2)
    Sample(1,cp_H2O_top_Avg,FP2)
    Sample(1,cp_H2O_gradient,IEEE4)
  #EndIf
  #If (TMPR_ENABLED) Then
    Sample(1,tmpr_btm_Avg,FP2)
    Sample(1,tmpr_top_Avg,FP2)
    Sample(1,tmpr_gradient,IEEE4)
  #EndIf

  Sample(1,sonic_Ts_Avg,FP2)
  Sample(1,sonic_Ts_Std,FP2)
  Sample(1,Uz_Std,FP2)
  Sample(1,WS_sclr_Avg,FP2) 
  Sample(1,WD_unit_Avg,FP2)
  Sample(1,WD_unit_Std,FP2)
  Sample(1,WS_rslt_Avg,FP2)
  Sample(1,WD_rslt_Avg,FP2)
  Sample(1,WD_rslt_Std,FP2)
  Sample(1,op_CO2_Avg,IEEE4)
  Sample(1,op_CO2_Std,FP2)
  Sample(1,op_H2O_Avg,IEEE4)
  Sample(1,op_H2O_Std,FP2)
  Sample(1,op_press_Avg,IEEE4)
  #If (DATA_SRCS=SDM_CSAT3A_EC150_1) Then
    Sample(1,op_temp_Avg,FP2)
    StdDev(1,op_temp,FP2,op_temp=NAN)
    Average(1,op_co2_signal,FP2,op_co2_signal=NAN)
    Average(1,op_h2o_signal,FP2,op_h2o_signal=NAN)
  #EndIf
  
  #If (CP_CO2_ENABLED) Then
    Sample(1,cov_Uz_CO2,IEEE4)
    Sample(1,K_co2,IEEE4)
  #EndIf
  #If (CP_H2O_ENABLED) Then
    Sample(1,cov_Uz_H2O,IEEE4)
    Sample(1,K_w,IEEE4)
  #EndIf

  #If (TMPR_ENABLED) Then
    Sample(1,cov_Uz_Ts,IEEE4)
    Sample(1,K_h,IEEE4)
    Sample(1,fluxest_df1,IEEE4)
  #EndIf

  Average(1,logger_voltage,FP2,logger_voltage=NAN)
  Average(1,logger_temp,FP2,logger_temp=NAN)
EndTable


'=============================== MENU =========================================
Const Yes = True
Const No = False
Const Cancel = False
Dim save_changes As Boolean
Dim discard_changes As Boolean
Dim set_defaults As Boolean
Dim recompile As Boolean

DisplayMenu("Gradient system", -2)
  SubMenu("Initial setup")
'    MenuItem("# gas levels", NUM_LEVELS)
'      MenuPick(NUM_LEVELS, 2, 3)
    MenuItem("Enable DF 1?", DF1_ENABLED)
      MenuPick(DF1_ENABLED, No, Yes)
    MenuItem("Enable DF 2?", DF2_ENABLED)
      MenuPick(DF2_ENABLED, No, Yes)
    MenuItem("Enable DF 3?", DF3_ENABLED)
      MenuPick(DF3_ENABLED, No, Yes)
    MenuItem("Enable DF 4?", DF4_ENABLED)
      MenuPick(DF4_ENABLED, No, Yes)
    MenuItem("Enable CO2?", CP_CO2_ENABLED)
      MenuPick(CP_CO2_ENABLED, No, Yes)
    MenuItem("Enable H2O?", CP_H2O_ENABLED)
      MenuPick(CP_H2O_ENABLED, No, Yes)
    MenuItem("Enable temp?", TMPR_ENABLED)
      MenuPick(TMPR_ENABLED, No, Yes)
'    MenuItem("# tmpr levels", NUM_TMPR_LEVELS)
'      MenuPick(NUM_TMPR_LEVELS, 2, 3)
    MenuItem("Enable GPS?", GPS_ENABLED)
      MenuPick(GPS_ENABLED, No, Yes)
    MenuItem("Time zone", UTC_OFFSET)
      MenuPick(UTC_OFFSET, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)
    MenuItem("Sonic/IRGA", DATA_SRCS)
      MenuPick(DATA_SRCS,SDM_CSAT3A_EC150_1,SDM_CSAT3_LI7500_2, RS232_CSAT3_LI7500_3)
    MenuItem("EC100 addr", EC100_ADDR)
      MenuPick(EC100_ADDR,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
    MenuItem("CSAT3 addr", CSAT3_ADDR)
      MenuPick(CSAT3_ADDR,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
    MenuItem("CSAT3 baud", CSAT3_BAUD)
      MenuPick(CSAT3_BAUD,9600,19200)
    MenuItem("LI7500 addr", LI7500_ADDR)
      MenuPick(LI7500_ADDR,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
    MenuItem("LI7500 baud", LI7500_BAUD)
      MenuPick(LI7500_BAUD,19200,38400)
    MenuRecompile("Recompile?", recompile)
      MenuPick(Cancel,Yes)
  EndSubMenu

  SubMenu("Gradient settings")
    SubMenu("Gas sampling")
      MenuItem("Dwell, min", ch_toggle_time)
        'TODO figure out best-compatible values for future 3rd level addition
        MenuPick(0.25, 0.5, 1, 1.5, 2, 3, 5, 6, 10, 15)
      MenuItem("Top H, cm", ch_inlet_top_H)
      MenuItem("Btm H, cm", ch_inlet_btm_H)
    EndSubMenu

    #If (DF1_ENABLED OR DF2_ENABLED OR DF3_ENABLED OR DF4_ENABLED) Then
    SubMenu("Analog input")
    #EndIf
      #If (DF1_ENABLED) Then
        MenuItem("DF 1 mult.", ch_df1_mult)
        MenuItem("DF 1 offset", ch_df1_offset)
      #EndIf
      #If (DF2_ENABLED) Then
        MenuItem("DF 2 mult.", ch_df2_mult)
        MenuItem("DF 2 offset", ch_df2_offset)
      #EndIf
      #If (DF3_ENABLED) Then
        MenuItem("DF 3 mult.", ch_df3_mult)
        MenuItem("DF 3 offset", ch_df3_offset)
      #EndIf
      #If (DF4_ENABLED) Then
        MenuItem("DF 4 mult.", ch_df4_mult)
        MenuItem("DF 4 offset", ch_df4_offset)
      #EndIf
    #If (DF1_ENABLED OR DF2_ENABLED OR DF3_ENABLED OR DF4_ENABLED) Then
    EndSubMenu
    #EndIf
    
    #If (CP_CO2_ENABLED OR CP_H2O_ENABLED) Then
    SubMenu("Closed-path IRGA")
    #EndIf
      #If (CP_CO2_ENABLED) Then
        MenuItem("CO2 mult.", ch_cp_co2_mult)
        MenuItem("CO2 offset", ch_cp_co2_offset)
      #EndIf
      #If (CP_H2O_ENABLED) Then
        MenuItem("H2O mult.", ch_cp_h2o_mult)
        MenuItem("H2O offset", ch_cp_h2o_offset)
      #EndIf
    #If (CP_CO2_ENABLED OR CP_H2O_ENABLED) Then
    EndSubMenu
    #EndIf
    
    #If (TMPR_ENABLED) Then
    SubMenu("Thermistors")
      MenuItem("Set mode", ch_tmpr_state)
        MenuPick(Standby, Normal, Calibrating)
      MenuItem("Top H, cm", ch_tmpr_top_H)
      MenuItem("Btm H, cm", ch_tmpr_btm_H)
      MenuItem("T-B offset", ch_tmpr_top_btm)
    EndSubMenu
    #EndIf
    
    SubMenu("Processing")
      MenuItem("Calc. type", ch_grad_type)
        MenuPick(Logarithmic, Linear)
      MenuItem("Azimuth, deg", ch_sonic_azimuth)
    EndSubMenu
    SubMenu("Save changes")
      MenuItem("Save now?", save_changes)
        MenuPick(Cancel,Yes)
      MenuItem("Discard?", discard_changes)
        MenuPick(Cancel,Yes)
      MenuItem("Set default?", set_defaults)
        MenuPick(Cancel,Yes)
    EndSubMenu
  EndSubMenu
EndMenu


'============================== SUBROUTINES ===================================
Sub set_default_choices()
  ch_df1_mult       = 1.0
  ch_df1_offset     = 0
  ch_df2_mult       = 1.0
  ch_df2_offset     = 0
  ch_df3_mult       = 1.0
  ch_df3_offset     = 0
  ch_df4_mult       = 1.0
  ch_df4_offset     = 0
  ch_cp_co2_mult    = 1.0
  ch_cp_co2_offset  = 0
  ch_cp_h2o_mult    = 1.0
  ch_cp_h2o_offset  = 0
  ch_tmpr_state     = Standby
  ch_tmpr_top_btm   = 0.0
  ch_sonic_azimuth  = 0
  ch_toggle_time    = 5 'in minutes
  ch_inlet_top_H    = 0
  ch_inlet_btm_H    = 0
  ch_tmpr_top_H     = 0
  ch_tmpr_btm_H     = 0
  ch_grad_type      = Logarithmic
EndSub

Sub populate_choices()
  Move(choice(1),NUM_SETTINGS,settings(1),NUM_SETTINGS)
EndSub

Sub save_current_choices()
  Move(settings(1),NUM_SETTINGS,choice(1),NUM_SETTINGS)

  'Input validation
  toggle_intv = toggle_time * 60
  While (sonic_azimuth < 0)
    sonic_azimuth += 360
  Wend
  sonic_azimuth = sonic_azimuth MOD 360

  'Update dependent states
  If (inlet_btm_H > 0 AND inlet_top_H > 0) Then
    If (inlet_btm_H >= inlet_top_H) Then
      inlet_btm_H = 0
      inlet_top_H = 0
      gas_gradient_H = 0
    ElseIf (grad_type = Logarithmic) Then
      gas_gradient_H = SQR(inlet_top_H * inlet_btm_H)
      gas_denom = LN(inlet_top_H/inlet_btm_H)*gas_gradient_H
    ElseIf (grad_type = Linear) Then
      gas_gradient_H = (inlet_top_H + inlet_btm_H)/2
      gas_denom = inlet_top_H - inlet_btm_H
    Else
      gas_gradient_H = 0
    EndIf
  Else
    inlet_btm_H = 0
    inlet_top_H = 0
    gas_gradient_H = 0
  EndIf
  If (tmpr_btm_H > 0 AND tmpr_top_H > 0) Then
    If (tmpr_btm_H >= tmpr_top_H) Then
      tmpr_btm_H = 0
      tmpr_top_H = 0
      tmpr_gradient_H = 0
    ElseIf (grad_type = Logarithmic) Then
      tmpr_gradient_H = SQR(tmpr_top_H * tmpr_btm_H)
      tmpr_denom = LN(tmpr_top_H/tmpr_btm_H)*tmpr_gradient_H
    ElseIf (grad_type = Linear) Then
      tmpr_gradient_H = (tmpr_top_H + tmpr_btm_H)/2
      tmpr_denom = tmpr_top_H - tmpr_btm_H
    Else
      tmpr_gradient_H = 0
    EndIf
  Else
    tmpr_btm_H = 0
    tmpr_top_H = 0
    tmpr_gradient_H = 0
  EndIf

  'replace choices with validated settings and save to file
  Move(choice(1),NUM_SETTINGS,settings(1),NUM_SETTINGS)
  Calfile(settings,NUM_SETTINGS,SETTINGS_FILE,WRITEFILE)
EndSub

Sub setup()
  filehandle = FileOpen(SETTINGS_FILE,"rb",0)
  FileClose(filehandle)
  If (filehandle = 0) Then 'file was not found
    set_default_choices()
  Else
    Calfile(settings,NUM_SETTINGS,SETTINGS_FILE,READFILE)
    populate_choices()
  EndIf
  save_current_choices()

  is_sampling_top = False
  is_sampling_mid = False
  'no need for bottom state indicator; both top/mid false implies bottom=true

  Move(sonic(1),5,NAN,1)
  Move(op_irga(1),4,NAN,1)
  Move(extra_irga(1),3,NAN,1)
  Move(raw_conc(1),4,NAN,1)
  Move(raw_cp_irga(1),2,NAN,1)
  Move(tmpr(1),3,NAN,1)

  #If (DATA_SRCS=RS232_CSAT3_LI7500_3) Then
    SerialOpen(CSAT3_COM,CSAT3_BAUD,3,0,25)
    SerialOpen(LI7500_COM,LI7500_BAUD,0,0,57)
  #EndIf
EndSub

Sub reset_settings()
  FileManage(SETTINGS_FILE,8) 'delete settings file
  setup()
EndSub


'============================= FUNCTIONS ======================================
Function sonic_temp(speed_of_sound) As Float
  'see Appendix C. CSAT3 Measurement Theory of the CSAT3 User Manual
  '  Ts = c^2 / (phi * Rd) - 273.15 
  '     where phi = 1.4 = ratio of specific heat of moist air at const press
  '                       to specific heat at const volume
  '           Rd = 287.04 J / (K kg)
  Return ((speed_of_sound*speed_of_sound / 401.856) - 273.15)
  'use x*x to avoid overflows possible with x^2
EndFunction


'========================== MAIN PROGRAM ======================================
PipeLineMode
BeginProg
  Call setup()
  CallTable info
  Scan (FAST_INTV,mSec,0,0)
    #If (DATA_SRCS=SDM_CSAT3A_EC150_1) Then
      EC100(ec100_raw(1),EC100_ADDR,1)
      Move(sonic(1),5,ec100_raw(1),5)
      disable_sonic = sonic_diag > 0
      'convert mass density to molar density for LI7500 compatibility
      op_CO2 = ec100_raw(6)/MW_co2 'mg/m^3 -> mmol/m^3
      op_H2O = ec100_raw(7)*1000/MW_h2o 'g/m^3 -> mmol/m^3
      op_diag = ec100_raw(8)
      op_temp = ec100_raw(9)
      op_press = ec100_raw(10)
      op_co2_signal = ec100_raw(11)
      op_h2o_signal = ec100_raw(12)
      disable_op = op_diag > 0
    #ElseIf (DATA_SRCS=SDM_CSAT3_LI7500_2) Then
      CS7500(op_CO2,1,LI7500_ADDR,LI7500_CMD)
      disable_op = (op_diag XOR &hF0) AND &hF0
      CSAT3(sonic_Ux,1,CSAT3_ADDR,CSAT3_CMD,CSAT3_OPT)
      disable_sonic = (sonic_diag AND &hF000)
    #ElseIf (DATA_SRCS=RS232_CSAT3_LI7500_3) Then
      SerialInRecord(CSAT3_COM,csat3_record,0,10,&h55AA,bytes,11)
      SerialInRecord(LI7500_COM,li7500_record,&h0A,0,&h090D,bytes,11)

      For i = 2 To 8 Step 2 'load signed ints (words 0-3)
        ii = i >> 1 'fast divide by 2
        byte1 = ASCII(csat3_record(1,1,i)) 'grab sign+MSB
        sonic(ii) = (byte1 AND &h7F) << 8 'shift MSB into pos
        sonic(ii) += ASCII(csat3_record(1,1,i-1)) 'add LSB
        If (byte1 AND &h80) Then sonic(ii) -= 32768 'apply sign
      Next i
      MoveBytes(word4,3,csat3_record,8,1) 'load unsigned int
      MoveBytes(word4,2,csat3_record,9,1)
      For i = 1 To 3 'apply range scaling
        rcode = (word4 AND csat3_rbits(1,i)) >> csat3_rbits(2,i)
        sonic(i) *= csat3_ranges(rcode+1)
      Next i
      sonic_Ts = sonic_temp(sonic(4)*0.001 + 340)
      sonic_diag = word4
      disable_sonic = (sonic_diag AND &hF000)

      SplitStr(li7500_vals,li7500_record,"",4,0)
      op_diag = li7500_vals(1)
      op_CO2 = li7500_vals(2)
      op_H2O = li7500_vals(3)
      op_press = li7500_vals(4)
      disable_op = (op_diag XOR &hF0) AND &hF0
    #EndIf

    CallTable ts_fast
    'TODO -> alignment table

    If (TimeIntoInterval(0,toggle_intv,Sec)) Then 
      If (num_levels = 3) Then
        If (is_sampling_mid) Then
          is_sampling_top = True
          is_sampling_mid = False
          valve_state = TOP
        ElseIf (is_sampling_top) Then
          is_sampling_top = False
          'is_sampling_mid should still be False
          valve_state = BOTTOM
        Else
          'is_sampling_top should still be False
          is_sampling_mid = True
          valve_state = MIDDLE
        EndIf
      Else 'FOR ONLY TWO LEVELS
        is_sampling_top = NOT is_sampling_top
        is_sampling_mid = False 'catch switch 3->2 levels while sampling mid
        valve_state = IIF(is_sampling_top, TOP, BOTTOM)
      EndIf

      Move(conc(1),12,NAN,1) 'clear so inactive levels don't retain
      Move(cp_irga(1),6,NAN,1) 'last value from when active
    EndIf
    PortSet(VALVE_1_CTRL,is_sampling_top) 'not allowed in conditional
    PortSet(VALVE_2_CTRL,is_sampling_mid)

    cov_array(1,1) = sonic_Uz
    cov_array(1,2) = sonic_Ts
    cov_array(1,3) = op_CO2
    cov_array(1,4) = op_H2O
    CallTable work
    If (work.Output(1,1)) Then
      GetRecord(work_out(1),work,1)

      WD_unit_Avg = (360 + WD_unit_Avg + sonic_azimuth) MOD 360 'TODO add mag declin
      WD_rslt_Avg = (360 + WD_rslt_Avg + sonic_azimuth) MOD 360

      If (gas_gradient_H > 0) Then
        #If (DF1_ENABLED) Then
          df1_gradient = (df1_top_Avg - df1_btm_Avg)*100/gas_denom
        #EndIf
        #If (DF2_ENABLED) Then
          df2_gradient = (df2_top_Avg - df2_btm_Avg)*100/gas_denom
        #EndIf
        #If (DF3_ENABLED) Then
          df3_gradient = (df3_top_Avg - df3_btm_Avg)*100/gas_denom
        #EndIf
        #If (DF4_ENABLED) Then
          df4_gradient = (df4_top_Avg - df4_btm_Avg)*100/gas_denom
        #EndIf
        #If (CP_CO2_ENABLED) Then
          cp_co2_gradient = (cp_CO2_top_Avg - cp_CO2_btm_Avg)*100/gas_denom
          K_co2 = cov_Uz_CO2/cp_co2_gradient
        #EndIf
        #If (CP_H2O_ENABLED) Then
          cp_h2o_gradient = (cp_H2O_top_Avg - cp_H2O_btm_Avg)*100/gas_denom
          K_w = cov_Uz_H2O/cp_h2o_gradient
        #EndIf
      EndIf

      #If (TMPR_ENABLED) Then
        If (tmpr_gradient_H > 0) Then
          tmpr_gradient = tmpr_top_Avg - tmpr_top_btm - tmpr_btm_Avg
          tmpr_gradient *= 100/tmpr_denom 'scale degC/cm => degC/m
          K_h = cov_Uz_Ts/tmpr_gradient
          fluxest_df1 = df1_gradient * K_h
        Else
          tmpr_gradient = NAN
        EndIf
      #EndIf
    EndIf
    CallTable stats

    If (save_changes) Then
      Call save_current_choices()
      save_changes = Cancel
      CallTable info
    ElseIf (discard_changes) Then
      Call populate_choices()
      discard_changes = Cancel
      CallTable info
    ElseIf (set_defaults) Then
      Call reset_settings()
      set_defaults = Cancel
      CallTable info
    EndIf

    inbetween_1hz_scan = TRUE
    If (just_had_1hz_scan) Then
      just_had_1hz_scan = FALSE
      inbetween_1hz_scan = FALSE
    EndIf
	NextScan 
	
  SlowSequence
  Scan(SLOW_INTV,Sec,10,-1)
    PanelTemp(logger_temp,INTEG)
    Battery(logger_voltage)

    #If (DF1_ENABLED) Then
      VoltDiff(df1_value,1,mv5000,DF1_IO,1,0,INTEG,df1_mult,df1_offset)
    #EndIf
    #If (DF2_ENABLED) Then
      VoltDiff(df2_value,1,mv5000,DF2_IO,1,0,INTEG,df2_mult,df2_offset)
    #EndIf
    #If (DF3_ENABLED) Then
      VoltDiff(df3_value,1,mv5000,DF3_IO,1,0,INTEG,df3_mult,df3_offset)
    #EndIf
    #If (DF4_ENABLED) Then
      VoltDiff(df4_value,1,mv5000,DF4_IO,1,0,INTEG,df4_mult,df4_offset)
    #EndIf
    #If (CP_CO2_ENABLED) Then
      VoltDiff(cp_CO2_value,1,mv5000,CP_CO2_IO,1,0,INTEG,cp_co2_mult,cp_co2_offset)
    #EndIf
    #If (CP_H2O_ENABLED) Then
      VoltDiff(cp_H2O_value,1,mv5000,CP_H2O_IO,1,0,INTEG,cp_h2o_mult,cp_h2o_offset)
    #EndIf
    #If (tmpr_enabled) Then
      Therm107(tmpr_btm,1,TMPR_BTM_IO,TMPR_VX_IO,0,INTEG,TMPR_MULT,TMPR_OFF)
'      If (num_levels = 3) Then Therm107(tmpr_mid,1,TMPR_MID_IO,TMPR_VX_IO,0,INTEG, TMPR_MULT,TMPR_OFF)
      Therm107(tmpr_top,1,TMPR_TOP_IO,TMPR_VX_IO,0,INTEG,TMPR_MULT,TMPR_OFF)
    #EndIf
    #If (GPS_ENABLED) Then
      GPS(gps16x(1),GPS_COM,UTC_OFFSET*3600,MAX_DIFF,nmea_str(1))
      CallTable(gps_daily)
    #EndIf

    'push values into correct 'level'; other 'levels' are set NAN during transition
    If (is_sampling_mid) Then
      df1_mid = df1_value
      df2_mid = df2_value
      df3_mid = df3_value
      df4_mid = df4_value
      cp_CO2_mid = cp_CO2_value
      cp_H2O_mid = cp_H2O_value
    ElseIf (is_sampling_top) Then
      df1_top = df1_value
      df2_top = df2_value
      df3_top = df3_value
      df4_top = df4_value
      cp_CO2_top = cp_CO2_value
      cp_H2O_top = cp_H2O_value
    Else 'bottom
      df1_btm = df1_value
      df2_btm = df2_value
      df3_btm = df3_value
      df4_btm = df4_value
      cp_CO2_btm = cp_CO2_value
      cp_H2O_btm = cp_H2O_value
    EndIf
    CallTable ts_slow
    #If (tmpr_enabled)
      CallTable tmpr_cal
    #EndIf

  just_had_1hz_scan = TRUE
  NextScan
EndProg

